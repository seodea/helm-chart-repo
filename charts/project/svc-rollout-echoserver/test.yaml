---
# Source: rollout-echoserver/charts/rollout-subchart-test/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: test-dev-rollout-canary-svc
  labels:
    helm.sh/chart: rollout-subchart-test-0.1.0
    app.kubernetes.io/name: dev-rollout
    app.kubernetes.io/instance: test
    env: dev
    app: echoserver
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: NodePort
  ports:
    - name: test-dev-rollout-canary-svc
      port: 80
      targetPort: 80 # $ 사용 시 전체 변수에서 조회 가능
      protocol: TCP
  selector:
    app.kubernetes.io/name: dev-rollout
    app.kubernetes.io/instance: test
    env: dev
    app: echoserver
---
# Source: rollout-echoserver/charts/rollout-subchart-test/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: test-dev-rollout-stable-svc
  labels:
    helm.sh/chart: rollout-subchart-test-0.1.0
    app.kubernetes.io/name: dev-rollout
    app.kubernetes.io/instance: test
    env: dev
    app: echoserver
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: NodePort
  ports:
    - name: test-dev-rollout-stable-svc
      port: 80
      targetPort: 80 # $ 사용 시 전체 변수에서 조회 가능
      protocol: TCP
  selector:
    app.kubernetes.io/name: dev-rollout
    app.kubernetes.io/instance: test
    env: dev
    app: echoserver
---
# Source: rollout-echoserver/charts/rollout-subchart-test/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: test-dev-rollout-root-svc
  labels:
    helm.sh/chart: rollout-subchart-test-0.1.0
    app.kubernetes.io/name: dev-rollout
    app.kubernetes.io/instance: test
    env: dev
    app: echoserver
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
spec:
  type: NodePort
  ports:
    - name: test-dev-rollout-root-svc
      port: 80
      targetPort: 80 # $ 사용 시 전체 변수에서 조회 가능
      protocol: TCP
  selector:
    app.kubernetes.io/name: dev-rollout
    app.kubernetes.io/instance: test
    env: dev
    app: echoserver
---
# Source: rollout-echoserver/charts/rollout-subchart-test/templates/eks-ingress.yml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: test-dev-rollout-ingress
  labels:
    helm.sh/chart: rollout-subchart-test-0.1.0
    app.kubernetes.io/name: dev-rollout
    app.kubernetes.io/instance: test
    env: dev
    app: echoserver
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
  annotations:
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: instance
    alb.ingress.kubernetes.io/subnets: subnet-09f1ab2ff6e4f2988,subnet-0eccba1b1190cc500
    alb.ingress.kubernetes.io/security-groups: sg-05e3d194ad1ebcd80
    kubernetes.io/ingress.class: alb
spec:
  rules:
    - host: 
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
                service:
                  name: test-dev-rollout-root-svc 
                  port:
                    name: use-annotation
          - path: /test
            pathType: Exact
            backend:
                service:
                  name: test-dev-rollout-canary-svc 
                  port:
                    number: 80
---
# Source: rollout-echoserver/charts/rollout-subchart-test/templates/rollouts.yml
apiVersion: argoproj.io/v1alpha1
kind: Rollout
metadata:
  name: test-dev-rollout
  labels:
    helm.sh/chart: rollout-subchart-test-0.1.0
    app.kubernetes.io/name: dev-rollout
    app.kubernetes.io/instance: test
    env: dev
    app: echoserver
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: dev-rollout
      app.kubernetes.io/instance: test
      env: dev
      app: echoserver
  template:
    metadata:
      labels:
        app.kubernetes.io/name: dev-rollout
        app.kubernetes.io/instance: test
        env: dev
        app: echoserver
    spec:
      containers:
        - name: rollout-subchart-test
          image: "932824558442.dkr.ecr.ap-northeast-2.amazonaws.com/nginx:1.23-alpine"
          imagePullPolicy: IfNotPresent
          ports:
          - containerPort: 80
          resources:
            {}
    strategy:
    canary:
      canaryService: test-dev-rollout-canary-svc
      stableService: test-dev-rollout-stable-svc
      trafficRouting:
        alb:
          ingress: test-dev-rollout-ingress # fill a ingress name out
          # Reference to a Service that the Ingress must target in one of the rules (optional).
          # If omitted, uses canary.stableService.
          rootService: test-dev-rollout-root-svc 
          # Service port is the port which the Service listens on (required).
          servicePort: 80
          # stick session이 필요한 경우
          # stickinessConfig:
          #   enabled: true
          #   durationSeconds: 3600
      steps:
      - setWeight: 10
      - pause:
          duration: 1m
      - setWeight: 20
      - pause:
          duration: 2m
      - setWeight: 30
      - pause:
          duration: 5m
      - pause: {}
